[{"id":0,"href":"/about/","title":"About","section":"Jellyfish Jabberings","content":" About this site # I\u0026rsquo;m nearing my 4 year anniversary at Benchling and, in the tradition of an undergraduate thesis at the end of college, I thought it\u0026rsquo;d be worth writing up all of my learnings in a place where others can read them.\nThe target audience for this is current Benchlings and ex-Benchlings, though there\u0026rsquo;s nothing company-sensitive or non-public on this site.\nWhat is your goal in writing this? # My only goal is to write down what I\u0026rsquo;ve learned in a place where others can see it. I don\u0026rsquo;t expect to win any Pulitzer\u0026rsquo;s. I don\u0026rsquo;t expect my writing here to have any effect (positive or negative) on my day job on the Benchling product team.\nWhat inspired you to do this? # This site is partly inspired by Steve Yegge, Joel Spolsky, and Dan Luu. All three of them are far better writers than I am, so go read their blogs.\nI\u0026rsquo;ve also done a few talks, and it\u0026rsquo;s been fun to share learnings with newer folks in this industry (and see whether veterans agree or disagree with me). So this is in some ways a descendent of more traditional internal talks I give like \u0026ldquo;Life of an Experiment\u0026rdquo; and \u0026ldquo;What is a Study?\u0026rdquo; and external talks like \u0026ldquo;Machine Learning for R\u0026amp;D\u0026rdquo;.\nDisclaimer: The opinions expressed on this blog are solely those of the author and do not necessarily reflect the views of their employer or any organization with which they are affiliated.\n"},{"id":1,"href":"/memory/","title":"Organizational memory is very short","section":"Essays","content":" Organizational memory is very short # Median tenure at a tech company is about 2.5 years, and getting shorter. And while I think that\u0026rsquo;s generally good for employees, who can grow in their careers, compensation, and opportunities by switching roles frequently, it makes the companies themselves weaker.\nThe best people for the job # It took me a long time to realize that the smartest technologists, the people who really know what they\u0026rsquo;re doing, they don\u0026rsquo;t often write in a public facing way where other people can read it. Some of them might\u0026hellip;but most don\u0026rsquo;t.\nAnd that means that most of the knowledge about what a job is, or how to do a job well, it\u0026rsquo;s not being written down anywhere that you can see it from the outside. I can name, off the top of my head, the best 20 software engineers I\u0026rsquo;ve worked with. None of them have a significant public facing web presence, and while I\u0026rsquo;m sure a few have random blogs floating around in the corner of the internet, I haven\u0026rsquo;t read their stuff, and no one else has either.\nInstead the people writing the articles about how to do the job are, often, people not actually doing the job anymore. The best books about how to be a PM are people who used to be PMs, but the best job description for them now is \u0026ldquo;book promotor\u0026rdquo; or \u0026ldquo;author\u0026rdquo; or \u0026ldquo;sales person\u0026rdquo; or \u0026ldquo;consultant\u0026rdquo;.\nDon\u0026rsquo;t get me wrong - they write great books. And I\u0026rsquo;d be the first one to recommend Lean Startup or Cracking the PM Interview or any of the other 100 books in that genre. They\u0026rsquo;re great summaries of general concepts. But I don\u0026rsquo;t have much evidence that the writers were actually good PMs, vs just being in the right place at the right time. Are the people who write about the thing actually good at doing the thing? Or just good writers who have the credibility and knowledge to sell books?\nIt\u0026rsquo;s easier with jobs where publicity correlates to being good at your job. Good CEOs are selling their company to employees, investors, and customers. So if you\u0026rsquo;ve heard of a CEO, if they write something you respect, if you listen to them on a podcast, they\u0026rsquo;re actually showing themselves as being good at (at least part of) the job they have.\nBut engineers, PMs, designers, customer-facing team members, etc are roles where the best people are not necessarily the best at being public-facing. Indeed, many of them might see writing as, at best, a distraction.\nInternal documentation # So you would think that instead of writing things down externally, talented technologists would write things down internally. Like in a wiki, or in a series of github PRs, or in onboarding documentation that everyone needs to read. And they do.\nThe best people usually try to pass down their knowledge to newer employees, partly because it feels good to teach, but mostly because that knowledge was earned with blood and sweat and why not just tell people instead of forcing them to figure it out from first principles or re-experience the same pain?\nExcept, new employees don\u0026rsquo;t have time to read all the crap that was written down before they joined a company. Few people even bother to look. I certainly didn\u0026rsquo;t when I joined Benchling - there was 6 years of documents floating around and I did what any rational person would do: I hunted and pecked for what I thought was useful, and left the rest. I didn\u0026rsquo;t do that good of a job because I didn\u0026rsquo;t know what to look for.\nIt was only after I did a cursory search of a concept, like a vocabulary term a customer used once that sounded weird or interesting, that I would find reams of documents about it. Sometimes it was a really important concept!\nAnd then I would wonder to myself - am I the only idiot who didn\u0026rsquo;t know about all of this? And I would ask around, and the veterans agreed that they\u0026rsquo;ve known about the thing for a while, but there are fewer veterans around who remember that far back, because median tenure in this industry is so short. And even if tenure was better, people are people, they forget things. How much do you remember from 5 years ago?\nWe treat companies like these ships of theseuses, where we can replace the boards (rotten or not) and carry on sailing. But some of the boards actually had, written in people\u0026rsquo;s memories or in long forgotten documents and meeting recordings, all sorts of knowledge about sea monsters and where the buried treasure on that island once was.\nAnd we can\u0026rsquo;t go back and find it 1) because we don\u0026rsquo;t know which documents in our internal system are valuable and which ones were the equivalent of Plato\u0026rsquo;s allegory of the cave and 2) because the people who do know either are either busy or don\u0026rsquo;t remember or their slack is deactivated.\nWhy don\u0026rsquo;t people talk to their predecessors? # The most striking thing that I notice about this sort of missing knowledge is that people don\u0026rsquo;t really realize the things they don\u0026rsquo;t know. I think intellectually, they know that it is possible to have gaps, but pleading ignorance and going to someone else and asking them to fill you in, that\u0026rsquo;s sort of an embarrassing, humble thing to do, and I don\u0026rsquo;t see it as much as I\u0026rsquo;d like to. I am as guilty of this as anyone.\nFor example, let\u0026rsquo;s say you\u0026rsquo;re new in a job here. You would think that the first thing you would do is find the person who used to have that job, and ask them to give you as much knowledge as possible. Because there\u0026rsquo;s no way you would possibly know as much about this job as the person who just had it, right?\nBut apart for a few exceptional cases (for example, when someone moves from IC to manager and backfill hires the IC to replace them) this doesn\u0026rsquo;t really happen. If the former person moved to a different role at Benchling, context and knowledge share is limited to, at best, a couple of 1:1s over the new person\u0026rsquo;s first quarter. If the former person in that role has left Benchling, I can guarantee it almost never happens.\nBecause we don\u0026rsquo;t talk much to or about alumni, it\u0026rsquo;s common for someone in a role to know, in some sense, the least about what was done in the past compared to the median colleague who is watching from the sidelines.\nAn exercise in relitigating all the old battles # The biggest problem with not looking at history is that we\u0026rsquo;re doomed to repeat it. Given the same first principles information, reasonable people ask similar questions.\nThat can be a good thing. For example, Benchling\u0026rsquo;s investment in development is something that was considered many years ago, and only recently came to fruition. For pretty much every product we\u0026rsquo;ve developed, there is a long and sometimes sordid history of look-a-likes and imitations and prototypes and hackathon projects going back years.\nIt\u0026rsquo;s most embarassing when a customer points it out (for some of our customers, they\u0026rsquo;ve seen multiple PMs, AEs, and CX owners go by). We\u0026rsquo;ll have calls with a customer where we ask the same questions as someone did a year ago and get the same answers.\nIn essence, the only thing that\u0026rsquo;s new is who is asking the questions.\nWrite more? # I don\u0026rsquo;t think I have a tractable solution to this problem except to encourage people to write down more about the work they do in a place that other people can read it. Thus this essay (and all writings on this site).\n"},{"id":2,"href":"/essays/","title":"Essays","section":"Jellyfish Jabberings","content":""}]